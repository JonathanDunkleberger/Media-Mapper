'use client';

import { useMemo } from 'react';

function sanitize(u?: string | null) {
  if (!u) return null;
  const s = u.trim();
  if (!s) return null;
  if (s.startsWith('http://')) return 'https://' + s.slice(7);
  // TMDB shorthand paths
  if (s.startsWith('/t/') || s.startsWith('/p/') || /^\/w\d+\//.test(s)) {
    return 'https://image.tmdb.org' + s;
  }
  return s;
}

interface TileImageProps {
  src?: string | null;
  alt: string;
  width?: number;
  height?: number;
  className?: string;
}

/**
 * Renders an image through the resilient /api/img proxy.
 * This component ensures that an image is always displayed, falling back
 * to a placeholder SVG generated by the API route if the upstream source fails.
 * It uses a standard <img> tag to avoid Next/Image optimizations and potential issues.
 */
export function TileImage({ src, alt, width = 300, height = 450, className }: TileImageProps) {
  const final = useMemo(() => {
    const fixed = sanitize(src);
    const mode = process.env.NEXT_PUBLIC_STABILITY_MODE === '1';
    const endpoint = '/api/img' + (fixed ? `?u=${encodeURIComponent(fixed)}` : '');
    return mode ? endpoint : endpoint; // both go through proxy in Stability Mode
  }, [src]);

  return (
    <img
      src={final}
      alt={alt}
      loading="lazy"
      decoding="async"
      width={width}
      height={height}
      className={className}
      style={{ width: '100%', height: 'auto', display: 'block', background: '#f4f4f4' }}
    />
  );
}
