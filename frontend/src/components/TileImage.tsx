'use client';

import { fixImageUrl } from '@/lib/fixImageUrl';

interface TileImageProps {
  src?: string | null;
  alt: string;
  width?: number;
  height?: number;
  className?: string;
}

/**
 * Renders an image through the resilient /api/img proxy.
 * This component ensures that an image is always displayed, falling back
 * to a placeholder SVG generated by the API route if the upstream source fails.
 * It uses a standard <img> tag to avoid Next/Image optimizations and potential issues.
 */
export function TileImage({ src, alt, className }: TileImageProps) {
  const cleanedUrl = fixImageUrl(src);
  
  // The API route will handle the placeholder logic if the URL is null.
  const proxySrc = `/api/img?u=${cleanedUrl ? encodeURIComponent(cleanedUrl) : ''}`;

  return (
    <img
      src={proxySrc}
      alt={alt}
      loading="lazy"
      decoding="async"
      className={className}
      style={{
        width: '100%',
        height: 'auto',
        display: 'block',
        aspectRatio: '2 / 3', // Maintain aspect ratio before image loads
        objectFit: 'cover',
      }}
    />
  );
}
